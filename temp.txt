def generate_test_data(data_type_string=None, data_type_dict=None, data_type_list_of_strings=None,
                       data_type_list_of_dicts=None, data_type_list_of_list_of_dicts=None,
                       data_type_list_of_list_of_strings=None, data_type_mixed=None,
                       complexity=None, seed=None):
    """
    Generate test data based on specified parameters.
    
    Args:
        data_type_string (str): Generate a string if 'true'
        data_type_dict (str): Generate a dictionary if 'true'
        data_type_list_of_strings (str): Generate a list of strings if 'true'
        data_type_list_of_dicts (str): Generate a list of dictionaries if 'true'
        data_type_list_of_list_of_dicts (str): Generate a list of list of dictionaries if 'true'
        data_type_list_of_list_of_strings (str): Generate a list of list of strings if 'true'
        data_type_mixed (str): Generate mixed data types if 'true'
        complexity (str or int): Complexity of the generated data (number of items)
        seed (str or int): Seed for random number generator
    
    Returns:
        dict: A dictionary named 'outputs' containing the generated test data
    """
    import phantom.rules as phantom
    import random
    import string
    import json
    
    def debug_print(message):
        phantom.debug(message)
    
    debug_print(f"Input complexity: {complexity}")
    debug_print(f"Input seed: {seed}")
    
    # Convert string 'true'/'false' to boolean
    data_types = {
        'string': data_type_string,
        'dict': data_type_dict,
        'list_of_strings': data_type_list_of_strings,
        'list_of_dicts': data_type_list_of_dicts,
        'list_of_list_of_dicts': data_type_list_of_list_of_dicts,
        'list_of_list_of_strings': data_type_list_of_list_of_strings,
        'mixed': data_type_mixed
    }
    
    for data_type in data_types:
        if isinstance(data_types[data_type], str):
            data_types[data_type] = data_types[data_type].lower() == 'true'
    
    # Set default values if inputs are empty or None
    def safe_int_conversion(value, default):
        if isinstance(value, int):
            return value
        elif isinstance(value, str):
            try:
                return int(value)
            except ValueError:
                return default
        else:
            return default

    complexity = safe_int_conversion(complexity, 10)
    seed = safe_int_conversion(seed, None)
    
    debug_print(f"Processed complexity: {complexity}")
    debug_print(f"Processed seed: {seed}")
    
    # Set random seed for reproducibility
    random.seed(seed)
    
    def generate_string():
        length = random.randint(complexity, complexity * 2)
        debug_print(f"Generating string of length: {length}")
        return ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))
    
    def generate_dict():
        return {generate_string(): generate_string() for _ in range(random.randint(2, 5))}
    
    def generate_list_of_strings():
        return [generate_string() for _ in range(random.randint(3, 7))]
    
    def generate_list_of_dicts():
        return [generate_dict() for _ in range(random.randint(2, 5))]
    
    def generate_list_of_list_of_dicts():
        return [[generate_dict() for _ in range(random.randint(1, 3))] for _ in range(random.randint(2, 4))]
    
    def generate_list_of_list_of_strings():
        return [[generate_string() for _ in range(random.randint(2, 4))] for _ in range(random.randint(2, 4))]
    
    def generate_mixed():
        generators = [generate_string, generate_dict, generate_list_of_strings, generate_list_of_dicts, 
                      generate_list_of_list_of_dicts, generate_list_of_list_of_strings]
        return random.choice(generators)()
    
    generators = {
        "string": generate_string,
        "dict": generate_dict,
        "list_of_strings": generate_list_of_strings,
        "list_of_dicts": generate_list_of_dicts,
        "list_of_list_of_dicts": generate_list_of_list_of_dicts,
        "list_of_list_of_strings": generate_list_of_list_of_strings,
        "mixed": generate_mixed
    }
    
    outputs = {}
    
    # Generate data for each selected type
    for data_type, selected in data_types.items():
        if selected:
            debug_print(f"Generating data for type: {data_type}")
            outputs[data_type] = generators[data_type]() if data_type != "mixed" else [generate_mixed() for _ in range(complexity)]
    
    # If no type was selected, generate mixed data
    if not outputs:
        debug_print("No specific type selected, generating mixed data")
        outputs["mixed"] = [generate_mixed() for _ in range(complexity)]
    
    debug_print(f"Generated outputs: {json.dumps(outputs, indent=2)}")
    
    return {
        "outputs": outputs
    }

# Test the function (this part should be removed before adding to Splunk SOAR)
if __name__ == "__main__":
    import json
    
    # Mock phantom.debug function for testing
    def phantom_debug(message):
        print(f"DEBUG: {message}")
    
    # Replace phantom.debug with our mock function
    phantom.debug = phantom_debug
    
    # Test cases
    test_cases = [
        {"data_type_string": "true", "complexity": "50", "seed": "42"},
        {"data_type_dict": "true", "data_type_list_of_strings": "true", "complexity": "10", "seed": "123"},
        {"data_type_mixed": "true", "complexity": "5", "seed": "789"},
        {}  # Test with no types selected
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nTest Case {i}:")
        result = generate_test_data(**case)
        print(json.dumps(result, indent=2))
        print(f"Number of output types: {len(result['outputs'])}")
        for key, value in result['outputs'].items():
            print(f"Type of {key}: {type(value)}")
            if isinstance(value, str):
                print(f"Length of {key}: {len(value)}")
            elif isinstance(value, list):
                print(f"Length of {key} list: {len(value)}")

    print("\nAll test cases completed successfully.")
